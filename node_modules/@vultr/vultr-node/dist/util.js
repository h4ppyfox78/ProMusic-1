exports.makeApiRequest = function (config, endpoint, userParameters) {
    var nf = require('node-fetch');
    var baseUrl = (config && config.baseUrl) || 'https://api.vultr.com/v2';
    var fetchUrl = "".concat(baseUrl).concat(endpoint.url);
    var options = {
        method: endpoint.requestType,
        headers: {
            Authorization: config && config.apiKey ? "Bearer ".concat(config.apiKey) : ''
        }
    };
    if (userParameters !== undefined) {
        var requestType = endpoint.requestType, parameters_1 = endpoint.parameters;
        // All methods may have path parameters
        var pathParams = Object.keys(userParameters).filter(function (key) { return parameters_1[key].path; });
        if (pathParams.length) {
            pathParams.forEach(function (param) {
                // Ex. '/bare-metals/{baremetal-id}/ipv4' becomes '/bare-metals/123456/ipv4'
                fetchUrl = fetchUrl.replace("{".concat(param, "}"), userParameters[param]);
            });
        }
        if (requestType === 'POST') {
            // POST requests will just send all data as JSON to the endpoint
            options.body = JSON.stringify(userParameters);
            options.headers['Content-Type'] = 'application/json';
        }
        else {
            if (requestType === 'GET' || requestType === 'DELETE') {
                // GET and DELETE requests may have path parameters as well as query parameters
                var queryParams = Object.keys(userParameters)
                    .filter(function (key) { return !parameters_1[key].path; })
                    .map(function (key) { return key + '=' + encodeURIComponent(userParameters[key]); })
                    .join('&');
                if (queryParams.length) {
                    fetchUrl = "".concat(fetchUrl, "?").concat(queryParams);
                }
            }
            else if (requestType === 'PATCH' || requestType === 'PUT') {
                // PATCH and PUT requests may have path parameters and data as a JSON object
                var bodyParams = Object.keys(userParameters)
                    .filter(function (key) { return !parameters_1[key].path; })
                    .reduce(function (newObj, key) {
                    var _a;
                    return Object.assign(newObj, (_a = {}, _a[key] = userParameters[key], _a));
                }, {});
                options.body = JSON.stringify(bodyParams);
                options.headers['Content-Type'] = 'application/json';
            }
        }
    }
    return nf(fetchUrl, options)
        .then(function (response) {
        // The request was not successful
        if (!response.ok) {
            throw Error(response.statusText);
        }
        var contentType = response.headers.get('content-type');
        // The request was successful, but does not return any data
        if (!contentType || !contentType.includes('application/json')) {
            return;
        }
        // The request was successful and contains JSON data
        return response.json().then(function (responseJSON) {
            return responseJSON;
        });
    })["catch"](function (err) {
        return err;
    });
};
