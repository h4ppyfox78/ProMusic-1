import { DeezerAlbum, DeezerPlaylist, Spotify, SoundCloud } from 'play-dl';
import { RequestInit } from 'node-fetch';

interface TrackData {
    durationInSec: number;
    title: string;
    url: string;
    thumbnails?: any[];
    duration: string;
    type: string;
    description?: string;
    views?: number;
    channel?: {
        name: string;
        url: string;
    };
    private?: boolean;
    shortTitle?: string;
    rank?: number;
    explicit?: string;
    previewURL?: string;
    artist?: {
        id: number;
        name: string;
        url: string;
        picture: {};
    };
    album?: {};
}
declare class Track {
    title: string;
    url: string;
    thumbnails?: any[];
    duration: number;
    type: string;
    description?: string;
    views?: number;
    channel?: {};
    private?: boolean;
    shortTitle?: string;
    rank?: number;
    explicit?: string;
    previewURL?: string;
    artist?: {
        id: number;
        name: string;
        url: string;
        picture: {};
    };
    album?: {};
    constructor(track: TrackData);
}

interface PlayList {
    type: string;
    id: string;
    url: string;
    title: string;
    videoCount: number;
    channel: {
        type: string;
        name: string;
        url: string;
    };
    thumbnail: string;
    videos: TrackData[];
}
declare class Playlist {
    type: string;
    id: string;
    url: string;
    title: string;
    videoCount: number;
    channel: {};
    thumbnail: string;
    videos: TrackData[];
    constructor(playlist: PlayList);
}

declare class Music {
    /**
     * Searches for a track or a playlist on youtube
     * @param {string} query: string | url
     * @returns Promise<Track[] | Playlist[]>
     */
    youtube(query: string): Promise<Track[] | Playlist[]>;
    /**
     *  Searches for a track, playlist or album on deezer
     * @param {string} query
     * @returns Promise<Track | Playlist | DeezerAlbum | DeezerPlaylist>
     */
    deezer(query: string): Promise<Track | Playlist | DeezerAlbum | DeezerPlaylist>;
    /**
     * Searches for a track, playlist or album on Spotify
     * @param {string} query
     * @returns Promise<Spotify>
     */
    spotify(query: string): Promise<Spotify>;
    /**
     * Gets a track or a playlist from Soundcloud
     * @param {string} query
     * @returns Promise<SoundCloud>
     */
    soundcloud(query: string): Promise<SoundCloud>;
}

declare class APIs {
    protected ShowID: string | undefined;
    protected MovieID: string | undefined;
    TMDBKey: string;
    constructor(TMDBKey: string);
    /**
     * Gets the Show ID from TheMovieDB
     * @param {string} query
     * @param {string} key
     * @returns {string} the Show ID
     */
    private getShowID;
    /**
     * Gets a Show Info from TheMovieDB
     * @param query
     * @param key
     * @returns {object} ShowInfo
     */
    getShowDetails(query: string, key: string): Promise<any>;
    /**
     * Gets an Anime Info from MyAnimeList
     * @param {string} query
     * @param {string} type
     * @returns {object}
     */
    getAnimeInfo(query: string, type?: string): Promise<{}>;
    /**
     * Gets a Movie ID from TheMovieDB
     * @param {string} query
     * @param {string | number} year
     * @param {string} key
     * @returns {string} The Movie ID
     */
    private getMovieID;
    /**
     * Gets a Movie Info from TheMovieDB
     * @param {string} query
     * @param {string | number} year
     * @param {string} key
     * @returns {object} MovieInfo
     */
    getMovieDetails(query: string, key: string): Promise<{}>;
    /**
     * Simple function to perform GET Requests
     * @param {string} url the link
     * @param {object} options node-fetch additional options
     * @returns JSON
     */
    request(url: string, options?: RequestInit): Promise<any>;
}

declare class StringUtils {
    /**
     * Chunks a single string into multiple multiple strings
     * @param {string} str the string
     * @param {number} size chunk by length
     * @returns Array containing the chunked strings
     */
    chunkSubString(str: string, size: number): string[];
    /**
     * A simple random password generator
     * @param {number} length
     * @returns string
     */
    RandomPasswordGenerator(length: number): string;
    /**
     * Simple function that creates multiple random passwords
     * @param {number} howMany number of passwords to generate
     * @param {number} passwordlength length of the password
     * @returns str[] of random passwords
     */
    GenerateABunchOfRandomPasswords(howMany: number, passwordlength: number): string[];
}

declare class Utils {
    /**
     * Logger for the console
     * @param {string} message Error Message
     * @param {string} type Error Or Log
     * @returns void
     */
    logger(message: string | unknown, type?: string): void;
    /**
     * Creates a connection to a mongodb Database using mongoose
     * @param {string} mongourl
     */
    connectToDataBase(mongourl: string): void;
}

/**
 * Searches for a track or a playlist on youtube
 * @param {string} query: string | url
 * @returns Promise<Track[] | Playlist[]>
 */
declare function youtube(query: string): Promise<Track[] | Playlist[]>;
/**
 *  Searches for a track, playlist or album on deezer
 * @param {string} query
 * @returns Promise<Track | Playlist | DeezerAlbum | DeezerPlaylist>
 */
declare function deezer(query: string): Promise<Track | Playlist | DeezerAlbum | DeezerPlaylist>;
/**
 * Searches for a track, playlist or album on Spotify
 * @param {string} query
 * @returns Promise<Spotify>
 */
declare function spotify(query: string): Promise<Spotify>;
/**
 * Gets a track or a playlist from Soundcloud
 * @param {string} query
 * @returns Promise<SoundCloud>
 */
declare function soundcloud(query: string): Promise<SoundCloud>;

export { APIs, Music, Playlist, StringUtils, Track, Utils, deezer, soundcloud, spotify, youtube };
