var P=Object.defineProperty;var o=(s,e)=>P(s,"name",{value:e,configurable:!0}),k=(s=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(s,{get:(e,r)=>(typeof require!="undefined"?require:e)[r]}):s)(function(s){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+s+'" is not supported')});import{yt_validate as x,search as f,deezer as D,spotify as S,sp_validate as M,dz_validate as I,so_validate as E,soundcloud as $}from"play-dl";var a=class{constructor(e){if(!e)throw new Error("Constructor was not initialized properly!");this.title=e.title,this.url=e.url,this.thumbnails=e?.thumbnails||void 0,this.duration=e?.durationInSec,this.type=e.type,this.description=e?.description,this.views=e?.views,this.channel={name:e?.channel?.name,url:e?.channel?.url},this.private=e?.private,this.shortTitle=e?.shortTitle,this.rank=e?.rank,this.explicit=e?.explicit,this.previewURL=e?.previewURL,this.artist=e?.artist,this.album=e?.album}};o(a,"Track");var l=class{async youtube(e){if(!e)throw new Error("No search query was provided!");let r=x(e);if(!r)throw new Error("This is not a valid search query!");let t,n;switch(console.log(r),r){case"video":if(n=await f(e),!n)throw new Error("This Track was not found!");t=n.map(i=>(console.log(i),new a(i)));break;case"search":if(n=await f(e),!n)throw new Error("No Song was found for this query!");t=n.map(i=>(console.log(i.thumbnails[0].url),new a(i)));break}return t}async deezer(e){if(!e)throw new Error("No search query was provided!");let r=await I(e);if(!r)throw new Error("This is not a valid search query!");let t,n;switch(r){case"search":n=await f(e,{source:{deezer:"track"}}),t=n.map(i=>new a(i));break;case"playlist":n=await D(e),t=n;break;case"track":n=await f(e,{source:{deezer:"track"}}),t=n.map(i=>new a(i));break;case"album":n=await D(e),t=n;break}return t}async spotify(e){if(!e)throw new Error("No search query was provided!");if(!M(e))throw new Error("This is not a valid search query!");return await S(e)}async soundcloud(e){if(!e)throw new Error("No search query was provided!");if(!E(e))throw new Error("This is not a valid search query!");return await $(e)}};o(l,"Music");var g=class{constructor(e){this.type=e.type,this.id=e.id,this.url=e.url,this.title=e.title,this.videoCount=e.videoCount,this.channel=e.channel,this.thumbnail=e.thumbnail,this.videos=e.videos}};o(g,"Playlist");import m from"node-fetch";var b=k("jikanjs");b.settings.setBaseURL("https://api.jikan.moe/v3",3);var d=class{constructor(e){this.TMDBKey=e}async getShowID(e){try{let t=await(await m(`https://api.themoviedb.org/3/search/tv?api_key=${this.TMDBKey}&language=en-US&query=${e}`)).json();return this.ShowID=t.results[0].id}catch(r){throw r}}async getShowDetails(e,r){if(!r)throw new Error("A TMDB API Key is required!");try{return await this.getShowID(e),await(await m(`https://api.themoviedb.org/3/tv/${this.ShowID}?api_key=${this.TMDBKey}&language=en-US`)).json()}catch(t){console.error(t)}}async getAnimeInfo(e,r="anime"){try{let n=(await b.search(r,e,[1])).results[0].mal_id,i=await b.loadAnime(n,"/"),h=i.genres.map(T=>T.name);return{malid:i.mal_id,imageUrl:i.image_url,titlerom:i.title,titleeng:i.title_english,episodes:i.episodes,status:i.status,rating:i.rating,score:i.score,rank:i.rank,synopsis:i.synopsis,premiered:i.premiered,genres:h,aired:i.aired.string}}catch(t){throw t}}async getMovieID(e){try{let t=await(await m(`https://api.themoviedb.org/3/search/movie?api_key=${this.TMDBKey}&language=en-US&query=${e}`)).json();if(!t.total_results)throw new Error("Nothing found with this name!");return this.MovieID=t.results[0].id}catch(r){throw r}}async getMovieDetails(e,r){if(!r)throw new Error("A TMDB API Key is required!");try{return await this.getMovieID(e),await(await m(`https://api.themoviedb.org/3/movie/${this.MovieID}?api_key=${this.TMDBKey}&language=en-US`)).json()}catch(t){throw t}}async request(e,r={}){try{return await(await m(e,r)).json()}catch(t){throw t}}};o(d,"APIs");var p=class{chunkSubString(e,r){let t=Math.ceil(e.length/r),n=new Array(t);for(let i=0,h=0;i<t;++i,h+=r)n[i]=e.substr(h,r);return n}RandomPasswordGenerator(e){let r="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890?!$",t=e,n="";for(let i=0;i<t;i++){let h=Math.floor(Math.random()*r.length);n+=r[h]}return n}GenerateABunchOfRandomPasswords(e,r){let t=[];for(let n=0;n<e;n++)t.push(this.RandomPasswordGenerator(r));return t}};o(p,"StringUtils");import w from"mongoose";import v from"chalk";import A from"moment";var y=class{logger(e,r="log"){let t=`${A().format("DD-MM-YYYY hh:mm:ss")}`;switch(r){case"log":return console.log(`[${v.gray(t)}]: [${v.black.bgGreen(r.toUpperCase())}] ${e}`);case"error":return console.log(`[${v.gray(t)}]: [${v.black.bgRed(r.toUpperCase())}] ${e}`);default:throw new TypeError("Logger type must be either log or error!")}}connectToDataBase(e){let r={useNewUrlParser:!0,autoIndex:!1,connectTimeoutMS:1e4,family:4,useUnifiedTopology:!0};w.connect(e,r),w.Promise=global.Promise,w.connection.on("connected",()=>{this.logger("[DB] DATABASE CONNECTED")}),w.connection.on("err",t=>{this.logger(`Mongoose connection error: 
 ${t.stack}`,"error")}),w.connection.on("disconnected",()=>{this.logger("Mongoose disconnected","error")})}};o(y,"Utils");async function ae(s){return await new l().youtube(s)}o(ae,"youtube");async function le(s){return await new l().deezer(s)}o(le,"deezer");async function ce(s){return await new l().spotify(s)}o(ce,"spotify");async function ue(s){return await new l().soundcloud(s)}o(ue,"soundcloud");export{d as APIs,l as Music,g as Playlist,p as StringUtils,a as Track,y as Utils,le as deezer,ue as soundcloud,ce as spotify,ae as youtube};
//# sourceMappingURL=index.mjs.map